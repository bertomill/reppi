// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  goals      Goal[]
  repLogs    RepLog[]
  objectives Objective[]
  notes      Note[]
  categories Category[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  targetReps  Int
  currentReps Int       @default(0)
  startDate   DateTime  @default(now())
  endDate     DateTime?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  repLogs RepLog[]
}

model RepLog {
  id        String   @id @default(cuid())
  count     Int
  notes     String?
  createdAt DateTime @default(now())
  goalId    String
  userId    String

  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(cuid())
  name      String
  type      String // "objective" or "note"
  createdAt DateTime @default(now())
  userId    String

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  objectives Objective[]
  notes      Note[]

  @@unique([name, type, userId])
}

model Objective {
  id         String   @id @default(cuid())
  title      String
  completed  Boolean  @default(false)
  date       DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
  userId     String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id         String   @id @default(cuid())
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
  userId     String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
